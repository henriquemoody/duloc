#!/usr/bin/env bash
# Usage: {script} MONTH
##

if [[ ${#} -eq 0 ]] || [[ ${#} -ne 1 ]]; then
  script-help "${0}" 1>&2
  exit 1
fi

if [[ ${1} == "--help" ]] || [[ ${1} == "-h" ]]; then
  script-help "${0}"
  exit
fi

set -euo pipefail

if [[ -z "${1}" ]]; then
  _help 1>&2
  exit 1

elif [[ "${1}" == "--help" ]] || [[ "${1}" == "-h" ]]; then
  _help
  exit
fi


IFS=$'\n'
MONTH="${1}"
YEAR=$(date +%Y)
BANK_FILENAME="${YEAR}-${MONTH}.Bank.xls"
PAYPAL_FILENAME="${YEAR}-${MONTH}.PayPal.csv"
if [[ ! -f "${PAYPAL_FILENAME}" ]]; then
  PAYPAL_FILENAME=$(mktemp)
fi
BASENAME="$(basename "${BANK_FILENAME}" ".xls")"
TSV_FILENAME=$(mktemp)
TSV_FILENAME_EXPENSES="${BASENAME}-Expenses.tsv"
TSV_FILENAME_INCOME="${BASENAME}-Income.tsv"
TSV_FILENAME_ASSETS="${BASENAME}-Assets.tsv"
ROOT_DIRECTORY=$(dirname $(realpath "${0}"))

sanitize-description()
{
  tr -d '"' |
    tr '[A-Z]' '[a-z]' |
    sed --regexp-extended "s/\b(\w)/\u\1/g" |
    sed --regexp-extended --file "${ROOT_DIRECTORY}/bank-to-finances-description.sed"
}

filter-description() {
  local description="${1}"
  local amount="${2}"
  local year="$(cut --delimiter "/" --field 1 <<< "${3}")"
  local month="$(cut --delimiter "/" --field 2 <<< "${3}" | sed --regexp-extended "s,\b0,,g")"
  local day="$(cut --delimiter "/" --field 3 <<< "${3}" | sed --regexp-extended "s,\b0,,g")"
  local trials="${4:-1}"

  local filtered_description=$(sanitize-description <<< "${description}")

  if [[ "${filtered_description}" != "PayPal" ]] || [[ "${trials}" -gt 5 ]]; then
    echo "${filtered_description}"
    return
  fi


  if grep --word-regexp "\-${amount}" "${PAYPAL_FILENAME}" | grep --quiet "${month}/${day}/${year}"; then
    grep --word-regexp "\-${amount}" "${PAYPAL_FILENAME}" |
      grep "${month}/${day}/${year}" |
      head --lines 1 |
      cut --delimiter '"' --field 24 |
      sanitize-description
    return
  fi

  filter-description "${filtered_description}" "${amount}" "${year}/${month}/$[day - 1]" $[trials + 1]
}

is-income() {
  local amount="${1}"
  local description="${2}"

  [[ "${amount}" =~ "-" ]] && [[ ! "${description}" =~ "Hm Carmo" ]]
}

is-asset() {
  local amount="${1}"
  local description="${2}"

  [[ "${description}" =~ "Personal Savings Account" ]] || [[ "${description_filtered}" =~ "Hm Carmo" ]]
}

print-type() {
  local description="${1}"

  sed --regexp-extended --file "${ROOT_DIRECTORY}/bank-to-finances-type.sed" <<< "${description}"
}

>"${TSV_FILENAME_INCOME}"
>"${TSV_FILENAME_ASSETS}"
>"${TSV_FILENAME_EXPENSES}"

ssconvert --export-options=$'separator=\'\t\' format=raw' --export-type=Gnumeric_stf:stf_assistant "${BANK_FILENAME}" "${TSV_FILENAME}"

while IFS=$'\t' read -r accountNumber _  date _ _ _  amount description; do
  grep --quiet --extended-regexp "^[0-9]+$" <<< "${accountNumber}" || continue

  amount_filtered=$(printf "%4.2f\n" "$(bc <<< "-1 * ${amount}")" | sed 's/\./,/')
  date_filtered=$(sed --regexp-extended "s,^([0-9]{4})([0-9]{2})([0-9]{2})$,\1/\2/\3," <<< "${date}")
  description_filtered=$(filter-description "${description}" "${amount_filtered}" "${date_filtered}")

  if is-income "${amount_filtered}" "${description_filtered}"; then
    echo -e "$(print-type "${description_filtered}")\t${date_filtered}\t$(sed 's/\./,/' <<< ${amount})\t${description_filtered}" >> "${TSV_FILENAME_INCOME}"
    continue

  elif is-asset "${amount_filtered}" "${description_filtered}"; then
    echo -e "Savings\t${date_filtered}\t${amount_filtered}"  >> "${TSV_FILENAME_ASSETS}"
    continue
  fi

  echo -e "$(print-type "${description_filtered}")\t${date_filtered}\t${amount_filtered}\t${description_filtered}" >> "${TSV_FILENAME_EXPENSES}"

done < "${TSV_FILENAME}"

wc -l "${BASENAME}-"*
